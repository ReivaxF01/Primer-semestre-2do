/* VISTAS SIMPLES Y COMPLEJAS, SECUENCIAS , SINONIMOS */

/* UNA VISTA ES UN OBJETO DEL ESQUEMA DE LA BASE DE DATOS QUE SE GENERA A PARTIR DE UNA O VARIAS TABLAS, EL PROPOSITO DE LAS VISTAS 
ES FACILITAR EL ACCESO A LOS DATOS (SON MÁS RÁPIDAS QUE LAS TABLAS AL MOMENTO DE CONSULTAR) Y ESTABLECER CIERTOS ASPECTOS DE SEGURIDAD
SOBRE LOS DATOS ALMACENADOS.

LAS VISTAS SIMPLES SE CREAN A PARTIR DE UNA TABLA SIN UTILIZAR FUNCIONES DE AGREGACIÓN (SUM,COUNT,AVG,MAX,MIN) NI TAMPOCO LA CLAUSULA 
GROUP BY , PERMITIENDO OPERACIONES DML (SELECT,INSERT,UPDATE,DELETE).

LAS VISTAS COMPLEJAS NORMALMENTE SE CONSTRUYEN USANDO 2 O MÁS TABLAS, PUEDEN USAR FUNCIONES DE AGREGACIÓN, GROUP BY, PERO NO GARANTIZAN
QUE LAS OPERACIONES DML (INSERT,UPDATE,DELETE) SE EJECUTEN CORRECTAMENTE */

/* FORMATO PARA CREAR UNA VISTA:
CREATE [OR REPLACE] NOMBRE_VISTA AS SELECT COLUMNA1,.... COLUMNA X
FROM TABLA1,....TABLA X */

CREATE VIEW JOVENES AS
SELECT * FROM EMPLEADO
WHERE EDAD BETWEEN 20 AND 35; //ejemplo de una vista simple

SELECT * FROM JOVENES;

CREATE OR REPLACE VIEW JOVENES AS //OR REPLACE SE USA PARA REEMPLAZAR UNA VISTA SI EXISTE, O SINO, CREARLA
SELECT * FROM EMPLEADO
WHERE EDAD BETWEEN 20 AND 40;

SELECT * FROM JOVENES;

INSERT INTO JOVENES VALUES(500,'Marco','Lillo',27,'masculino',700000,107,300); //EJEMPLO DE INSERCIÓN DE DATOS EN UNA VISTA

//CREAR VISTA SIMPLE DE SOLO LECTURA PARA LOS EMPLEADOS CON SUELDO MAYOR A 800000

CREATE VIEW SUELDOS AS
SELECT * FROM EMPLEADO
WHERE SUELDO > 800000
WITH READ ONLY; //VISTA DE SOLO LECTURA

SELECT * FROM SUELDOS;

/* CONSULTAS A MÁS DE UNA TABLA */

SELECT * FROM CARGO,EMPLEADO; //PRODUCTO CARTESIANO ENTRE CARGO Y EMPLEADO

SELECT * FROM CARGO,EMPLEADO
WHERE COD_CARGO = ID_CARGO; //SE IGUALAN LAS CLAVES FORANEAS CON LAS CLAVES PRIMARIAS DE LA OTRA TABLA

SELECT * FROM DEPARTAMENTO,EMPLEADO
WHERE COD_DEPARTAMENTO = ID_DEPARTAMENTO;

/* MOSTRAR NOMBRE , APELLIDO, EDAD DE LOS EMPLEADOS QUE TRABAJAN EN LOS DEPARTAMENTOS DE CONTABILIDAD Y RR.HH.*/

SELECT NOM_EMPLEADO,APEL_EMPLEADO,EDAD,NOM_DEPARTAMENTO 
FROM DEPARTAMENTO,EMPLEADO
WHERE COD_DEPARTAMENTO = ID_DEPARTAMENTO AND
NOM_DEPARTAMENTO IN ('Contabilidad','Recursos Humanos'); //EL OPERADOR AND EN ESTE CASO SE USA PARA AÑADIR CONDICIONES DENTRO DE LA CLAUSULA WHERE

/* LISTAR NOMBRE, APELLIDO, GENERO DE LOS EMPLEADOS QUE EJERCEN CARGO DE OPERARIO Y QUE SON MUJERES */

SELECT NOM_EMPLEADO,APEL_EMPLEADO,GENERO,NOM_CARGO
FROM EMPLEADO,CARGO
WHERE ID_CARGO = COD_CARGO AND GENERO = 'femenino' AND 
NOM_CARGO = 'Operario';

/* MOSTRAR NOMBRE, APELLIDO, SUELDO DE LOS EMPLEADOS QUE TRABAJAN EN RR.HH. Y DESEMPEÑAN EL CARGO DE OPERARIO */

SELECT NOM_EMPLEADO,APEL_EMPLEADO,SUELDO,NOM_CARGO,NOM_DEPARTAMENTO
FROM EMPLEADO, CARGO, DEPARTAMENTO
WHERE ID_CARGO=COD_CARGO AND ID_DEPARTAMENTO=COD_DEPARTAMENTO AND
NOM_DEPARTAMENTO ='Recursos Humanos' AND NOM_CARGO='Operario';

/* POR DEPARTAMENTO CONTAR LA CANTIDAD DE EMPLEADOS*/

SELECT NOM_DEPARTAMENTO,COUNT (*)
FROM DEPARTAMENTO,EMPLEADO
WHERE COD_DEPARTAMENTO = ID_DEPARTAMENTO 
GROUP BY NOM_DEPARTAMENTO;

/* POR NOMBRE DEL CARGO CONTAR LA CANTIDAD DE EMPLEADOS */

SELECT NOM_CARGO,COUNT (*)
FROM CARGO,EMPLEADO
WHERE COD_CARGO = ID_CARGO 
GROUP BY NOM_CARGO;

/* POR EL NOMBRE DEL DEPARTAMENTO Y CARGO CONTAR LA CANTIDAD DE EMPLEADOS  ORDENADOS ALFABETICAMENTE POR EL DEPARTAMENTO */

SELECT NOM_DEPARTAMENTO,NOM_CARGO,COUNT (*)
FROM DEPARTAMENTO,CARGO,EMPLEADO 
WHERE COD_DEPARTAMENTO = ID_DEPARTAMENTO AND COD_CARGO = ID_CARGO
GROUP BY NOM_DEPARTAMENTO,NOM_CARGO
ORDER BY NOM_DEPARTAMENTO;

/* UNION DE TABLAS MEDIANTE JOIN O INNER JOIN */

SELECT * FROM CARGO JOIN EMPLEADO
ON COD_CARGO=ID_CARGO
WHERE GENERO = 'masculino'; //LA FUNCION JOIN NOS PERMITE UNIR TABLAS, SIN NECESIDAD DE IGUALAR CLAVE FORANEA Y PRIMARIA, DEJANDO LA CLAUSULA WHERE LIBRE 

/*LEFT JOIN Y RIGHT JOIN */

SELECT * FROM DEPARTAMENTO  LEFT JOIN EMPLEADO 
ON COD_DEPARTAMENTO = ID_DEPARTAMENTO;

SELECT * FROM DEPARTAMENTO  RIGHT JOIN EMPLEADO 
ON COD_DEPARTAMENTO = ID_DEPARTAMENTO;

SELECT * FROM EMPLEADO RIGHT JOIN CARGO
ON COD_CARGO=ID_CARGO;

/* SE USAN PARA INDICAR EL ORDEN DE LOS DATOS, ES DECIR, SI QUEREMOS QUE APAREZCA A LA IZQUIERDA O A LA DERECHA UNA TABLA DETERMINADA*/
/* CONTAR POR CARGO LA CANTIDAD DE EMPLEADOS*/
SELECT NOM_CARGO,COUNT(COD_EMPLEADO)
FROM CARGO LEFT JOIN EMPLEADO
ON COD_CARGO=ID_CARGO
GROUP BY NOM_CARGO; //EL * NO CONSIDERA EL VALOR NULL

/* MUESTRE UN DETALLE CON LA CANTIDAD DE EMPLEADOS POR DEPARTAMENTO EN EL CASO QUE EL DEPARTAMENTO NO TENGA EMPLEADOS MUESTRE EL
VALOR 0 USE RIGHT JOIN*/

SELECT NOM_DEPARTAMENTO,COUNT(COD_EMPLEADO)
FROM EMPLEADO RIGHT JOIN DEPARTAMENTO
ON COD_DEPARTAMENTO = ID_DEPARTAMENTO
GROUP BY NOM_DEPARTAMENTO;

/* CREAR UNA VISTA DENOMINADA COMO 'TRABAJADORES' QUE MUESTRE EL NOMBRE, APELIDO, GENERO, SUELDO DE LOS EMPLEADOS QUE TRABAJAN EN LOS DEPARTAMENTOS DE RR.HH.
Y PRODUCCION INCORPORANDO EL PRESUPUESTO DEL DEPARTAMENTO*/

CREATE VIEW TRABAJADORES AS 
SELECT NOM_EMPLEADO,APEL_EMPLEADO,GENERO,SUELDO,NOM_DEPARTAMENTO,PRESUPUESTO_DEPARTAMENTO
FROM EMPLEADO JOIN DEPARTAMENTO
ON ID_DEPARTAMENTO = COD_DEPARTAMENTO
AND NOM_DEPARTAMENTO IN ('Recursos Humanos','Produccion');

SELECT * FROM TRABAJADORES;

/* CREAR UNA VISTA DENOMINADA 'RESUMEN' QUE MUESTRE POR EL NOMBRE DEL DEPARTAMENTO LA CANTIDAD DE EMPLEADOS, EL SUELDO PROMEDIO,
SUELDO MAXIMO Y SUELDO MINIMO DE AQUELLOS QUE TIENEN EMPLEADOS */

CREATE OR REPLACE VIEW RESUMEN AS
SELECT NOM_DEPARTAMENTO,COUNT(*) AS CANTIDAD,AVG(SUELDO) AS PROMEDIO,MAX(SUELDO) AS MAX,MIN(SUELDO) AS MIN
FROM DEPARTAMENTO JOIN EMPLEADO
ON COD_DEPARTAMENTO=ID_DEPARTAMENTO
GROUP BY NOM_DEPARTAMENTO;

SELECT * FROM RESUMEN;

/* LAS SECUENCIAS O SEQUENCE PERMITEN SIMULAR LAS COLUMNAS AUTOINCREMENTALES DE OTROS GESTORES DE BASES DE DATOS (MYSQL-POSTGRES)
Y SE USAN NORMALMENTE EN LA INSERCION DE DATOS PARA APOYAR EL REGISTRO DE UNA CLAVE PRIMARIA .

EL FROMATO BASICO PARA CRERA UNA SECUENCIA ES:
    CREATE SEQUENCE NOMBRE_SECUENCIA
    INCREMENT BY NUMERO(POR EL QUE SE INCREMENTA)
    START WITH NUMERO(POR EL QUE COMIENZA LA SECUENCIA)
    MAXVALUE NUMERO(EL VALOR MAXIMO QUE PUEDE TOMAR LA SECUENCIA)
    CYCLE (PARA QUE UNA VEZ LLEGADO AL MAXVALUE, LA SECUENCIA VUELVA A COMENZAR)
*/

CREATE SEQUENCE LISTA_NUMEROS
INCREMENT BY 2
START WITH 10; //ESTA SECUENCIA PARTE EN 10 Y SE INCREMENTA DE 2 EN 2

/* LAS PSEUDOCOLUMNAS DE UNA SECUENCIA SON NEXTVAL Y CURRVAL. NEXTVAL INICIALIZA LA SECUENCIA Y LA INCREMENTA
MIENTRAS QUE CURRVAL RETORNA EL VALOR ACTUAL DE LA SECUENCIA. LA FORMA DE USARLOS ES LA SIGUIENTE:
NOMBRE_SECUENCIA.NEXTVAL O NOMBRE_SECUENCIA.CURRVAL */

CREATE TABLE MARCAS(
ID_MARCA NUMBER,
NOM_MARCA VARCHAR2(20),
CONSTRAINT PK_MARCAS PRIMARY KEY(ID_MARCA));

SELECT * FROM MARCAS;

INSERT INTO MARCAS VALUES(LISTA_NUMEROS.NEXTVAL,'INACAP');
INSERT INTO MARCAS VALUES(LISTA_NUMEROS.NEXTVAL,'DUOC');
INSERT INTO MARCAS VALUES(LISTA_NUMEROS.NEXTVAL,'SANTO TOMÁS');
INSERT INTO MARCAS VALUES(LISTA_NUMEROS.NEXTVAL,'AIEP');

SELECT LISTA_NUMEROS.CURRVAL FROM MARCAS;

SELECT LISTA_NUMEROS.CURRVAL FROM DUAL; //la tabla dual se usa para pruebas en los casos de currval y nextval y es una tabla creada automáticamente por oracle

SELECT 45*89 FROM DUAL;

SELECT * FROM DUAL;

CREATE SEQUENCE SERIE_DOS
INCREMENT BY 5
START WITH 10
MINVALUE 10
MAXVALUE 20
CYCLE
NOCACHE;

SELECT SERIE_DOS.NEXTVAL FROM DUAL;
