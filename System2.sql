/*UNION DE LAS TABLAS CARGO Y DEPARTAMENTO POR MEDIO DE LA IGUALACIÓN DE CLAVES PRIMARIAS Y FORANEAS
USANDO LA CLAUSULA WHERE */

SELECT * FROM CARGO,EMPLEADO
WHERE COD_CARGO=ID_CARGO;

/* UNIÓN DE LAS TABLAS DEPARTAMENTO Y EMPLEADO POR MEDIO DE LA IGUALACIÓN DE CLAVE PRIMARIA Y FORANEA
USANDO LA CLAUSUSLA WHERE*/

SELECT * FROM DEPARTAMENTO,EMPLEADO
WHERE COD_DEPARTAMENTO=ID_DEPARTAMENTO;

/* UNIÓN DE LAS TABLAS CARGO, EMPLEADO Y DEPARTAMENTO POR MEDIO DE LA IGUALACIÓN DE LA CLAVE PRIMARIA Y FORANEA
USANDO LA CLAUSULA WHERE*/

SELECT * FROM CARGO,EMPLEADO,DEPARTAMENTO
WHERE COD_CARGO=ID_CARGO AND ID_DEPARTAMENTO=COD_DEPARTAMENTO;

/* PARA UNIR TABLAS EN ORACLE SE DIPONE DE LAS INSTRUCCIONES :
A) JOIN O INNER JOIN (UNIONES INTERNAS)
B) LEFT JOIN, RIGHT JOIN Y FULL OUTER JOIN (UNIONES EXTERNAS)

LAS UNIONES INTERNAS SE CARACTERIZAN POR UNIR TABLAS SIN LA GENERACIÓN DE VALORES NULL, A MENOS QUE ALGUNA DE LAS
TABLAS DISPONGA DE VALORES NULL

LAS UINIONES EXTERNAS, EN CAMBIO, AL SER UTILIZADAS PARA UNIR TABLAS PUEDEN GENERAR VALORES NULL
*/

/*UNION DE LA TABLA CARGO Y EMPLEADO USANDO JOIN*/

SELECT * FROM CARGO JOIN EMPLEADO
ON COD_CARGO=ID_CARGO;

/*UNION DE LA TABLA DEPARTAMENTO Y EMPLEADO USANDO INNER JOIN*/

SELECT * FROM DEPARTAMENTO INNER JOIN EMPLEADO
ON COD_DEPARTAMENTO=ID_DEPARTAMENTO;

/*UNION DE LA TABLA CARGO,EMPLEADO Y DEPARTAMENTO USANDO JOIN*/

SELECT * FROM CARGO JOIN EMPLEADO
ON COD_CARGO=ID_CARGO JOIN DEPARTAMENTO
ON ID_DEPARTAMENTO=COD_DEPARTAMENTO;

SELECT * FROM CARGO LEFT JOIN EMPLEADO
ON COD_CARGO=ID_CARGO;

SELECT * FROM EMPLEADO RIGHT JOIN DEPARTAMENTO
ON ID_DEPARTAMENTO=COD_DEPARTAMENTO;

SELECT * FROM DEPARTAMENTO FULL OUTER JOIN EMPLEADO
ON ID_DEPARTAMENTO=COD_DEPARTAMENTO;

//OUTER JOIN ES SIMILAR A RIGHT JOIN Y LEFT JOIN CUANDO USAMOS LA CLAUSULA SELECT//

SELECT * FROM EMPLEADO RIGHT JOIN DEPARTAMENTO
ON ID_DEPARTAMENTO=COD_DEPARTAMENTO;


create table fabricante(
codigo number,
nombre varchar2(50),
constraint fab_pk primary key(codigo));
create table producto(
codigo number,
nombre varchar2(50),
precio number,
cod_fabricante number,
constraint prod_pk primary key(codigo),
constraint prod_fk foreign key(cod_fabricante)references fabricante(codigo));
INSERT INTO fabricante VALUES(1, 'Asus');
INSERT INTO fabricante VALUES(2, 'Lenovo');
INSERT INTO fabricante VALUES(3, 'Hewlett-Packard');
INSERT INTO fabricante VALUES(4, 'Samsung');
INSERT INTO fabricante VALUES(5, 'Seagate');
INSERT INTO fabricante VALUES(6, 'Crucial');
INSERT INTO fabricante VALUES(7, 'Gigabyte');
INSERT INTO fabricante VALUES(8, 'Huawei');
INSERT INTO fabricante VALUES(9, 'Xiaomi');
INSERT INTO producto VALUES(1, 'Disco duro SATA3 1TB', 86, 5);
INSERT INTO producto VALUES(2, 'Memoria RAM DDR4 8GB', 120, 6);
INSERT INTO producto VALUES(3, 'Disco SSD 1 TB', 150, 4);
INSERT INTO producto VALUES(4, 'GeForce GTX 1050Ti', 185, 7);
INSERT INTO producto VALUES(5, 'GeForce GTX 1080 Xtreme', 755, 6);
INSERT INTO producto VALUES(6, 'Monitor 24 LED Full HD', 202, 1);
INSERT INTO producto VALUES(7, 'Monitor 27 LED Full HD', 245, 1);
INSERT INTO producto VALUES(8, 'Portatil Yoga 520', 559, 2);
INSERT INTO producto VALUES(9, 'Portatil Ideapd 320', 444, 2);
INSERT INTO producto VALUES(10, 'Impresora HP Deskjet 3720', 59, 3);
INSERT INTO producto VALUES(11, 'Impresora HP Laserjet Pro M26nw', 180, 3);

//LISTAR LOS NOMBRES DE LOS PRODUCTOS JUNTO AL NOMBRE DEL FABRICANTE RESPECTIVO//
SELECT PRODUCTO.NOMBRE AS NOM_PRODUCTO,FABRICANTE.NOMBRE AS NOM_FABRICANTE
FROM PRODUCTO JOIN FABRICANTE
ON PRODUCTO.COD_FABRICANTE=FABRICANTE.CODIGO;

SELECT P.NOMBRE AS NOM_PRODUCTO,F.NOMBRE AS NOM_FABRICANTE
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO; /*ESTO PERMITE CREAR ALIAS PARA LOS NOMBRES DE LAS TABLAS (PRODUCTO CON ALIAS P Y FABRICANTE CON F) ASI NO ES NECESARIO USAR
EL NOMBRE COMPLETO DE LA TABLA*/
/*EJERCICIOS GUIA*/
/*1._ Devuelve una lista con el nombre del producto, precio y nombre de fabricante de todos
los productos de la base de datos.*/
SELECT P.NOMBRE,P.PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F 
ON P.COD_FABRICANTE=F.CODIGO;
/*2._ Devuelve una lista con el nombre del producto, precio y nombre de fabricante de todos
los productos de la base de datos. Ordene el resultado por el nombre del fabricante, por
orden alfabético*/
SELECT P.NOMBRE,P.PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F 
ON P.COD_FABRICANTE=F.CODIGO
ORDER BY F.NOMBRE;
/*3._ Devuelve una lista con el nombre del producto, precio y nombre de fabricante de todos
los productos de la base de datos. Ordene el resultado por el nombre del fabricante, por
orden alfabético.*/
SELECT P.CODIGO,P.NOMBRE,P.PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F 
ON P.COD_FABRICANTE=F.CODIGO
ORDER BY F.NOMBRE;
/*4._ Devuelve una lista con el código del producto, nombre del producto, código del
fabricante y nombre del fabricante, de todos los productos de la base de datos.*/
SELECT P.NOMBRE,P.PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F 
ON P.COD_FABRICANTE=F.CODIGO
WHERE P.PRECIO=(SELECT MIN(PRECIO) FROM PRODUCTO);
/*5._ Devuelve el nombre del producto, su precio y el nombre de su fabricante, del producto
más caro*/
SELECT P.NOMBRE,P.PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F 
ON P.COD_FABRICANTE=F.CODIGO
WHERE P.PRECIO=(SELECT MAX(PRECIO) FROM PRODUCTO);
/*6._ Devuelve una lista de todos los productos del fabricante Lenovo*/
SELECT P.*,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE F.NOMBRE='Lenovo';
/*7._Devuelve una lista de todos los productos del fabricante Crucial que tengan un precio
mayor que 200€.*/
SELECT P.*,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE F.NOMBRE='Crucial' AND P.PRECIO > 200;
/*8._ Devuelve un listado con todos los productos de los fabricantes Asus, Hewlett-Packard y
Seagate. Sin utilizar el operador IN.*/
SELECT P.*,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE F.NOMBRE='Asus' OR F.NOMBRE='Hewlett-Packard' OR F.NOMBRE='Seagate';
/*9._ Devuelve un listado con todos los productos de los fabricantes Asus, Hewlett-Packard y
Seagate. Utilizando el operador IN.*/
SELECT P.*,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE F.NOMBRE IN('Asus','Hewlett-Packard','Seagate');
/*10._ Devuelve un listado con el nombre y el precio de todos los productos de los fabricantes
cuyo nombre termine por la vocal e.*/
SELECT P.*,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE F.NOMBRE LIKE '%e';
/*11._ Devuelve un listado con el nombre y el precio de todos los productos cuyo nombre de
fabricante contenga el carácter w en su nombre.*/
SELECT P.*,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE F.NOMBRE LIKE '%w%';
/*12._ Devuelve un listado con el nombre de producto, precio y nombre de fabricante, de todos
los productos que tengan un precio mayor o igual a 180€. Ordene el resultado en primer
lugar por el precio (en orden descendente) y en segundo lugar por el nombre (en orden
ascendente)*/
SELECT P.NOMBRE,P.PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE P.PRECIO >= 180 
ORDER BY P.PRECIO DESC,P.NOMBRE;
/*13._ Devuelve un listado con el código y el nombre de fabricante, solamente de aquellos
fabricantes que tienen productos asociados en la base de datos.*/
SELECT DISTINCT(F.CODIGO),F.NOMBRE 
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO;
//CONSULTAS MULTITABLA (LEFT Y RIGHT JOIN//
/*1._ Devuelve un listado de todos los fabricantes que existen en la base de datos, junto con
los productos que tiene cada uno de ellos. El listado deberá mostrar también aquellos
fabricantes que no tienen productos asociados*/
SELECT *
FROM FABRICANTE F LEFT JOIN PRODUCTO P
ON F.CODIGO=P.COD_FABRICANTE;

SELECT *
FROM FABRICANTE F RIGHT JOIN PRODUCTO P
ON F.CODIGO=P.COD_FABRICANTE;
/*2._ Devuelve un listado donde sólo aparezcan aquellos fabricantes que no tienen ningún
producto asociado*/
SELECT F.*
FROM FABRICANTE F LEFT JOIN PRODUCTO P
ON F.CODIGO=P.COD_FABRICANTE
WHERE P.CODIGO IS NULL;
//Consultas resumen (Funciones de agregado count, sum, max, min, avg)//
/*1._ Calcula el número total de productos que hay en la tabla productos*/
SELECT COUNT(*) AS TOTAL_PRODUCTOS FROM PRODUCTO;
/*2._ Calcula el número total de fabricantes que hay en la tabla fabricante*/
SELECT COUNT(*) AS TOTAL_FABRICANTES FROM FABRICANTE;
/*3._ Calcula el número de valores distintos de código de fabricante aparecen en la tabla
productos*/
SELECT COUNT(DISTINCT(COD_FABRICANTE)) FROM PRODUCTO;
/*4._ Calcula la media del precio de todos los productoS*/
SELECT AVG(PRECIO) AS PRECIO_MEDIO FROM PRODUCTO;

SELECT TRUNC(AVG(PRECIO),3)AS PRECIO_MEDIO FROM PRODUCTO; //TRUNC PERMITE DEFINIR LA CANTIDAD DE DECIMALES A MOSTRAR, EN ESTE CASO, 3//
/*5._ Calcula el precio más barato de todos los productos.*/
SELECT MIN(PRECIO) AS PRECIO_MAS_BAJO FROM PRODUCTO;
//6._ Calcula el precio más caro de todos los productos//
SELECT MAX(PRECIO) AS PRECIO_MAS_ALTO FROM PRODUCTO;
//7._ Lista el nombre y el precio del producto más barato.//
SELECT NOMBRE,PRECIO
FROM PRODUCTO
WHERE PRECIO=(SELECT MIN(PRECIO) FROM PRODUCTO);
//8._ Lista el nombre y el precio del producto más caro.//
SELECT NOMBRE,PRECIO
FROM PRODUCTO
WHERE PRECIO=(SELECT MAX(PRECIO) FROM PRODUCTO);
//9._ Calcula la suma de los precios de todos los productos.//
//10._//
//11._//
//12._//
//13._//
//14,_//

SELECT MAX(P.PRECIO),MIN(P.PRECIO),AVG(P.PRECIO),COUNT(*)
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE F.NOMBRE='Crucial';
/*16._ . Muestra el número total de productos que tiene cada uno de los fabricantes. El listado
también debe incluir los fabricantes que no tienen ningún producto. El resultado
mostrará dos columnas, una con el nombre del fabricante y otra con el número de
productos que tiene. Ordene el resultado descendentemente por el número de
productos.
*/
SELECT F.NOMBRE,COUNT(*)
FROM FABRICANTE F LEFT JOIN PRODUCTO P
ON P.COD_FABRICANTE = F.CODIGO
GROUP BY F.NOMBRE;
//17//
/*18._Muestra el precio máximo, precio mínimo, precio medio y el número total de productos
de los fabricantes que tienen un precio medio superior a 200€. No es necesario mostrar
el nombre del fabricante, con el código del fabricante es suficiente.*/
SELECT F.CODIGO,MAX(P.PRECIO),MIN(P.PRECIO),AVG(P.PRECIO),COUNT(*)
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
GROUP BY F.CODIGO
HAVING AVG(P.PRECIO)>200;
/*19._Muestra el nombre de cada fabricante, junto con el precio máximo, precio mínimo,
precio medio y el número total de productos de los fabricantes que tienen un precio
medio superior a 200€. Es necesario mostrar el nombre del fabricante*/
SELECT F.NOMBRE,MAX(P.PRECIO),MIN(P.PRECIO),AVG(P.PRECIO),COUNT(*)
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
GROUP BY F.NOMBRE
HAVING AVG(P.PRECIO)>200;
//20._Calcula el número de productos que tienen un precio mayor o igual a 180€//
SELECT COUNT(*) FROM PRODUCTO
WHERE PRECIO >= 180;
/*21._. Calcula el número de productos que tiene cada fabricante con un precio mayor o igual
a 180€.*/
SELECT F.NOMBRE,COUNT(*)
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE P.PRECIO>=180
GROUP BY F.NOMBRE;
/*22._Lista el precio medio los productos de cada fabricante, mostrando solamente el código
del fabricante.*/
SELECT F.CODIGO,AVG(P.PRECIO)
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
GROUP BY F.CODIGO;
/*23._ Lista el precio medio los productos de cada fabricante, mostrando solamente el nombre
del fabricante.*/
SELECT F.NOMBRE,AVG(P.PRECIO)
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
GROUP BY F.NOMBRE;
/*24._Lista los nombres de los fabricantes cuyos productos tienen un precio medio mayor o
igual a 150€.*/
SELECT F.NOMBRE,AVG(P.PRECIO)
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
GROUP BY F.NOMBRE
HAVING AVG(P.PRECIO)>=150;
/* 25._ Devuelve un listado con los nombres de los fabricantes que tienen 2 o más productos*/
SELECT F.NOMBRE,COUNT(*)
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
GROUP BY F.NOMBRE
HAVING COUNT(*)>1;
/*26._ Devuelve un listado con los nombres de los fabricantes y el número de productos que
tiene cada uno con un precio superior o igual a 220 €. No es necesario mostrar el nombre
de los fabricantes que no tienen productos que cumplan la condición.*/
SELECT F.NOMBRE,COUNT(*)
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO
WHERE P.PRECIO >= 220
GROUP BY F.NOMBRE;
/*27._ Devuelve un listado con los nombres de los fabricantes y el número de productos que
tiene cada uno con un precio superior o igual a 220 €. El listado debe mostrar el nombre
de todos los fabricantes, es decir, si hay algún fabricante que no tiene productos con un
precio superior o igual a 220€ deberá aparecer en el listado con un valor igual a 0 en el
número de productos*/
SELECT F.NOMBRE ,COUNT(P.CODIGO)
FROM FABRICANTE F LEFT JOIN PRODUCTO P
ON F.CODIGO=P.COD_FABRICANTE AND P.PRECIO >=220
GROUP BY F.NOMBRE;
/*29._. Devuelve un listado con el nombre del producto más caro que tiene cada fabricante. El
resultado debe tener tres columnas: nombre del producto, precio y nombre del
fabricante. El resultado tiene que estar ordenado alfabéticamente de menor a mayor
por el nombre del fabricante.*/
SELECT F.NOMBRE AS NOM_FABRICANTE,MAX(P.PRECIO) AS PRECIO_MAXIMO 
FROM PRODUCTO P JOIN FABRICANTE F
ON P.COD_FABRICANTE=F.CODIGO 
GROUP BY F.NOMBRE;

/*Subconsultas (En la cláusula WHERE)
1. Devuelve todos los productos del fabricante Lenovo. (Sin utilizar INNER JOIN).*/
SELECT * FROM PRODUCTO
WHERE COD_FABRICANTE IN (SELECT CODIGO FROM FABRICANTE
                         WHERE NOMBRE ='Lenovo');
/*2. Devuelve todos los datos de los productos que tienen el mismo precio que el producto
más caro del fabricante Lenovo. (Sin utilizar INNER JOIN).*/
SELECT * FROM PRODUCTO
WHERE PRECIO =(SELECT MAX(PRECIO) FROM PRODUCTO
                WHERE COD_FABRICANTE = (SELECT CODIGO FROM FABRICANTE 
                                        WHERE NOMBRE='Lenovo'));
/*3. Lista el nombre del producto más caro del fabricante Lenovo.*/
SELECT P.NOMBRE,PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F 
ON P.COD_FABRICANTE = F.CODIGO
WHERE F.NOMBRE = 'Lenovo' AND
PRECIO = (SELECT MAX(PRECIO) FROM PRODUCTO
            WHERE COD_FABRICANTE = (SELECT CODIGO FROM FABRICANTE 
                                    WHERE NOMBRE = 'Lenovo'));            
/*4. Lista el nombre del producto más barato del fabricante Hewlett-Packard.*/
SELECT P.NOMBRE,PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F 
ON P.COD_FABRICANTE = F.CODIGO
WHERE F.NOMBRE = 'Hewlett-Packard' AND
PRECIO = (SELECT MIN(PRECIO) FROM PRODUCTO
            WHERE COD_FABRICANTE = (SELECT CODIGO FROM FABRICANTE 
                                    WHERE NOMBRE = 'Hewlett-Packard'));
/*5. Devuelve todos los productos de la base de datos que tienen un precio mayor o igual al
producto más caro del fabricante Lenovo.*/
SELECT P.NOMBRE,PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F 
ON P.COD_FABRICANTE = F.CODIGO
WHERE F.NOMBRE != 'Lenovo' AND
PRECIO >= (SELECT MAX(PRECIO) FROM PRODUCTO
            WHERE COD_FABRICANTE = (SELECT CODIGO FROM FABRICANTE 
                                    WHERE NOMBRE = 'Lenovo'));
/*6. Lista todos los productos del fabricante Asus que tienen un precio superior al precio
medio de todos sus productos.*/
SELECT P.NOMBRE,PRECIO,F.NOMBRE
FROM PRODUCTO P JOIN FABRICANTE F 
ON P.COD_FABRICANTE = F.CODIGO
WHERE F.NOMBRE = 'Asus' AND
PRECIO > (SELECT AVG(PRECIO) FROM PRODUCTO
            WHERE COD_FABRICANTE = (SELECT CODIGO FROM FABRICANTE 
                                    WHERE NOMBRE = 'Asus'));
/* LOS SINONIMOS SON OBJETOS DEL ESQUEMA DE BASE DE DATOS QUE SE UTILIZAN PARA REFERENCIAR OTROS OBJETOS 
DONDE EL NOMBRE ASIGNADO ES COMPLEJO, LARGO O DIFICIL DE UTILIZAR.EXISTEN 2 TIPOS DE SINONIMO, LOS SINONIMOS
PRIVADOS Y PUBLICOS. LOS PRIVADOS SON ACCESIBLES SOLO POR EL USUARIO QUE LOS CREÓ , MIENTRAS QUE LOS PUBLICOS
SON UTILIZABLES POR TODOS LOS USUARIOS QUE PERTENECEN AL ESQUEMA DE LA BASE DE DATOS*/

/* EL FORMATO PARA CREAR UN SINONIMO ES :
    CREATE SYNONYM NOMBRE FOR OBJETO_ESQUEMA; (PARA UN SINONIMO PRIVADO)
    CREATE PUBLIC SYNONYM NOMBRE FOR OBJETO_ESQUEMA; (PARA UN SINONIMO PUBLICO)
*/

CREATE SYNONYM FAB FOR FABRICANTE;

SELECT * FROM FAB;

INSERT INTO FAB VALUES(10,'Toshiba');

CREATE PUBLIC SYNONYM PROD FOR PRODUCTO;

SELECT * FROM PROD;

INSERT INTO PROD VALUES(12, 'Mouse',5,10); 

/* PARA ELIMINAR UN SINONIMO USAR:
    DROP SYNONYM NOMBRE;
    O DROP PUBLIC SYNONYM NOMBRE; SI EL SINONIMO ES PUBLICO
*/

DROP SYNONYM FAB;

DROP PUBLIC SYNONYM PROD;

/*LOS INDICES EN ORACLE SE CREAN PARA AGILIZAR LA BUSQUEDA DE DATOS EN LA BASE DE DATOS
EXISTEN 2 TIPOS DE INDICES, LOS UNICOS Y LOS NO UNICOS. LOS INDICES UNICOS NO PERMITEN LA REPETICION DE DATOS
MIENTRAS QUE LOS NO UNICOS SOPORTAN LA DUPLICACION DE DATOS. LA CREACION DE UN INDICE DEPENDE DE VARIOS FACTORES
SIENDO ALGUNOS: LA(S) COLUMNA(S) MS CONSULTADAS POR LOS USUARIOS , LA CANTIDAD DE FILAS DISPONIBLES EN LA TABLA 
LA PRESENCIA DE VALORES NULL Y EL TIPO DE DATO ALBERGADO ENTRE OTROS. SIN EMBARGO LA CRECAIÓN INDISCRIMINADA 
DE INDICES EN UNA BASE DE DATOS PRODUCE UN RETRASO EN LOS TIEMPOS DE RESPUESTA

EL FORMATO PARA CREAR INDICES EN ORACLE ES EL SIGUIENTE:
     CREATE INDEX NOMBRE ON TABLA(COL1,...,COLN);
     CREATE UNIQUE INDEX NOMBRE ON TABLA(COL1,...,COLN);
*/

CREATE INDEX I_NOM_FAB ON FABRICANTE(NOMBRE);

SELECT * FROM FABRICANTE;

INSERT INTO FABRICANTE VALUES(11,'Toshiba');

CREATE UNIQUE INDEX I_NOM_PROD ON PRODUCTO(NOMBRE);

INSERT INTO PRODUCTO VALUES(13, 'Mouse',10,5);

CREATE INDEX I_MI_INDICE ON PRODUCTO(PRECIO,COD_FABRICANTE);

/* PARA ELIMINAR INDICES SE USA:
    DROP INDEX NOMBRE;
    */
DROP INDEX I_NOM_FAB;
DROP INDEX I_NOM_PROD;
DROP INDEX I_MI_INDICE;

/* LOS CONTENIDOS PARA LA PRIMERA EVALUACIÓSN SON:
    -VISTAS
    -SECUENCIAS
    -CONSULTAS MULTITABLA
    -SINONIMOS
    -INDICES
*/

/*UNIDAD 2*/

/*  FUNCIONES PARA MANEJO DE CADENAS CARACTERES O TEXTO
    FUNCIONES PARA MANEJO DE VALORES NUMERICOS
    FUNCIONES PARA LA GESTION DE FECHAS
    FUNCIONES DE CONVERSION PARA TIPOS DE DATOS
    FUNCIONES PARA EL MANEJO DE CONDICIONES NULL
    FUNCIONES PARA EL USO DE EXPRESIONES CONDICIONALES
*/

/* UNA FUNCION ES UNA PORCIONALIDA DE CODIGO QUE PUEDE O NO TENER PARAMETROS Y QUE RETORNA
SIEMPRE UN VALOR*/

//FUNCIONES PARA MANEJO DE CADENAS DE CARACTERES O TEXTO//

//UPPER (CADENA) TRANSFORMA A MAYUSCULA EL PARAMETRO CADENA//

SELECT NOMBRE, UPPER(NOMBRE) AS NOM FROM FABRICANTE;

SELECT UPPER('inacap curico') FROM FABRICANTE;

SELECT * FROM DUAL;

SELECT UPPER('inacap curico') FROM DUAL;

//LOWER(CADENA) TRANSFORMA A MINUSCULA EL PARAMETRO CADENA//

SELECT NOMBRE,LOWER(NOMBRE) FROM PRODUCTO;

SELECT LOWER('CURICO INFORMATICA INACAP') FROM DUAL;

//INITCAP(CADENA) TRANSFORMA LA PRIMERA LETRA DE CADA PALABRA A MAYUSCULA, EL RESTO DE LETRAS SE ESCRIBEN CON MINUSCULAS//

SELECT NOMBRE,INITCAP(NOMBRE) FROM PRODUCTO;

SELECT INITCAP('hola mundo') FROM DUAL;

SELECT NOMBRE,UPPER(NOMBRE),LOWER(NOMBRE),INITCAP(NOMBRE) FROM PRODUCTO;

//LENGTH(CADENA) RETORNA UN NUMERO QUE REPRESENTA LA CANTIDAD DE CARACTERES CONTENIDOS EN EL ARAMETRO CADENA//

SELECT NOMBRE,LENGTH(NOMBRE) FROM FABRICANTE;

SELECT * FROM FABRICANTE
ORDER BY LENGTH(NOMBRE);

SELECT * FROM FABRICANTE
ORDER BY LENGTH(NOMBRE) DESC;

/*SUBSTR(CADENA, POSICION_INICIAL,CANTIDAD) PERMITE EXTRAER CARACTERES A PARTIR DE UNA CADENA DE TEXTO
INDICANDO UNA POSICIÓN INICIAL Y LA CANTIDAD DE CARACTERES A EXTRAER*/

SELECT NOMBRE,SUBSTR(NOMBRE,1,3) FROM FABRICANTE; //ACA EXTRAE LAS PRIMERAS TRES LETRAS DEL NOMBRE DEL FABRICANTE//

SELECT NOMBRE,SUBSTR(NOMBRE,2,1) FROM FABRICANTE;

SELECT NOMBRE,SUBSTR(NOMBRE,LENGTH(NOMBRE),1)FROM FABRICANTE;

SELECT NOMBRE,SUBSTR(NOMBRE,-3) FROM FABRICANTE;

/* INSTR(CADENA,CAD_BUSCAR,POS_INICIAL) RETORNA UN NUMERO SEÑALANDO LA POSICION DONDE SE ENCUENTRA EL PARAMETRO 'CAD_BUSCAR' DENTRO
DEL PRIMER PARAMETRO, EN CASO QUE NO HAYA COINCIDENCIA RETORNA EL VALOR 0*/

SELECT NOMBRE,INSTR(NOMBRE,'u',1) FROM FABRICANTE;

SELECT NOMBRE,INSTR(NOMBRE,'a',1,2) FROM FABRICANTE; //EL 4TO PARAMETRO INDICA LA OCURRENCIA DE LA BUSQUEDA, ES DECIR, EN ESTE CASO BUSCA LA POSICION DE LAS SEGUNDA A//

SELECT NOMBRE,INSTR(NOMBRE,'LED',1) FROM PRODUCTO;

/*REPLACE(CADENA,CAD_BUSCAR,CAD_REEMPLAZO) REEMPLAZA UNA CADENA DE TEXTO POR OTRA
SIEMPRE Y CUANDO SE ENCUENTRE LA CADENA DE CARACTERES DE ORIGEN*/

SELECT NOMBRE,REPLACE(NOMBRE,'Portatil','Notebook') FROM PRODUCTO;

//LTRIM(CADENA) ELIMINA LOS ESPACIOS EN BLANCO CONTENIDOS A LA IZQUIERDA DEL PARAMETRO CADENA//

SELECT '     INACAP' AS COL1, LTRIM('     INACAP') AS COL2 FROM DUAL;

//RTRIM(CADENA) HACE LO MISMO QUE LTRIM  PERO CON LOS ESPACIOS A LA DERECHA//

SELECT 'INACAP    ' AS COL1,RTRIM('INACAP     ') AS COL2 FROM DUAL;

//TRIM(CADENA) ELIMINA LOS ESPACIOS A LA DERECHA Y A LA IZAQUIERDA DELA CADENA//

SELECT '     INACAP     ' AS COL1,TRIM('     INACAP    ') AS COL2 FROM DUAL;

//LPAD(CADENA,LARGO,CAD) RELLENA ALA IZQUIERDA EL PARAMETRO CADENA CON EL PARAMETRO CAD SEGUN EL LARGO INDICADO//

SELECT NOMBRE,LPAD(NOMBRE,10,'*') FROM FABRICANTE;

SELECT NOMBRE,LPAD(NOMBRE,LENGTH(NOMBRE)+5,'*') FROM FABRICANTE;

//RPAD(CADENA,LARGO,CAD) HACE LO MISMO QUE LPAD PERO A LA DERECHA//

SELECT NOMBRE,RPAD(NOMBRE,15,'!') FROM FABRICANTE;

SELECT NOMBRE,RPAD(NOMBRE,LENGTH(NOMBRE)+5,'!') FROM FABRICANTE;

//REVERSE(CADENA) INVIERTE EL ORDEN DE LA PALABRA//

SELECT NOMBRE,REVERSE(NOMBRE) FROM FABRICANTE;

//Funciones para el manejo de expresiones númericos//

/* TRUNC(NUMERO_DECIMAL,POS_DECIMAL), TRUNCA UN NUMERO DECIMAL A PARTIR DE LA POSICION SEÑALADA EN EL SEGUNDO PARAMETRO, EN EL CASO DE QUE 
EL SEGUNDO PARAMETRO NO SE INDIQUE NADA, SE TRUNCAN TODOS LOS DECIMALES */

SELECT TRUNC(3.14159265358979323846,2) FROM DUAL;

/* ROUND(NUMERO_DECIMAL,POS_DECIMAL) REDONDEA LA POSICION DECIMAL INDICADA EN EL SEGUNDO PARAMETRO */

SELECT ROUND(3.14159265358979323846,4) FROM DUAL;

/* MOD(DIVIDENDO,DIVISOR) CALCULA EL RESTO DE LA DIVISION*/

SELECT MOD(9,5) FROM DUAL; //<- EN ESTE CASO EL RESTO SERIA 4//

/* POWER(BASE,EXPONENTE) CALCULA LA POTENCIA DE UN NUMERO EXPRESADO COMO EL PARAMETRO BASE ELEVADO AL EXPONENTE*/

SELECT POWER(2,3) FROM DUAL;

SELECT POWER(10,2) FROM DUAL;

/* SQRT(NUMERO)CALCULA LA RAIZ CUADRADA DEL PARAMETRO NUMERO*/

SELECT  SQRT(16) FROM DUAL;

/* ABS(NUMERO) RETORNA EL VALOR ABSOLUTO DEL PARAMETRO NUMERO*/

SELECT ABS(-345) FROM DUAL;

/* SIGN(NUMERO) RETORNA EL SIGNO DEL PARAMETRO NUMERO EXPRESADO COMO 1 (SI ES POSITIVO) O -1 (SI ES NEGATIVO)*/

SELECT SIGN(-567) FROM DUAL;

/* CEIL(NUMERO_DECIMAL) APROXIMA HACIA ARRIBA LA PARTE ENTERA DEL NUMERO*/

SELECT CEIL(3.14159265358979323846) FROM DUAL;

/* FLOOR(NUMERO_DECIMAL) APROXIMA HACIA ABAJO LA PARTE ENTERA DEL DECIMAL*/

SELECT FLOOR(3.14159265358979323846) FROM DUAL;

/* EXISTEN FUNCIONES ESTADISTICAS, TRIGONOMETRICAS, LOGARITMOS, ETC.*/

CREATE TABLE PERSONA(
CODIGO NUMBER,
NOMBRE VARCHAR2(50),
APELLIDO VARCHAR2(30),
FECHA_NAC DATE,
CONSTRAINT PERSON_PK PRIMARY KEY(CODIGO));

INSERT INTO PERSONA VALUES(1,'RENE','RIOS','19-05-2000');
INSERT INTO PERSONA VALUES(2,'RAUL','LAGOS','10-11-1999');
INSERT INTO PERSONA VALUES(3,'SERGIO','DIAZ','06-04-1998');
INSERT INTO PERSONA VALUES(4,'PEDRO','SANTOS','19-05-2001');                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
INSERT INTO PERSONA VALUES(5,'MARLENE','ARRIAGADA','19-05-2000');

/*FUNCIONES PARA EL MANEJO DE FECHAS EN ORACLE*/

/* SYSDATE RETORNA LA FECHA ACTUAL EXTRAIDA DE LA ZONA GEOGRAFICA*/

SELECT SYSDATE FROM DUAL;

/*CURRENT_DATE RETORNA LA FECHA ACTUAL EXTRAIDA DE LA ZONA GEOGRAFICA*/

SELECT CURRENT_DATE FROM DUAL;

/*ADD_MONTHS(FECHA_INICIAL,CANTIDAD_MESES) RETORNA LA FECHA RESULTADO DE LA DE MESES AL PARAMETRO FECHA INICIAL*/

SELECT FECHA_NAC,ADD_MONTHS(FECHA_NAC,2) FROM PERSONA;

/* SUMAR 3 AÑOS A LA FECHA DE NACIMIENTO DE LAS PERSONAS*/

SELECT FECHA_NAC,ADD_MONTHS(FECHA_NAC,36) FROM PERSONA;

/* RESTAR UN MES A LA FECHA DE NACIMIENTO*/

SELECT FECHA_NAC,ADD_MONTHS(FECHA_NAC,-1) FROM PERSONA;

/* MONTHS_BETWEEN(FECHA_1,FECHA_2)CALCULA LA DIFERENCIA DE MESES ENTRE LA FECHA 1 Y FECHA 2*/

SELECT FECHA_NAC,TRUNC(MONTHS_BETWEEN(SYSDATE,FECHA_NAC)/12) AS EDAD FROM PERSONA;

/* NOTA: LA FECHA MAYOR DEBE SER EL PARAMETRO 1 (ES DECIR, LA FECHA MAS ACTUAL) Y EL SEGUNDO DEBE SER LA FECHA MÁS ANTIGUA*/

SELECT MONTHS_BETWEEN('25-12-2024',SYSDATE) FROM DUAL;

/* LAST_DAY(FECHA) RETORNA LA FECHA DEL ULTIMO DIA DEL MES CRRESPONDIENTE A LA FECHA INDICADA COMO PARAMETRO*/

SELECT LAST_DAY(SYSDATE) FROM DUAL;

/* NEXT_DAY(FECHA_INICIAL,NOMBRE_DIA) RETORNA LA FECHA DEL NOMBRE DEL DÍA A PARTIR DE LA FECHA INICIAL DADA COMO PARAMETRO*/

SELECT NEXT_DAY(SYSDATE,'JUEVES') FROM DUAL;
SELECT NEXT_DAY(SYSDATE,'VIERNES') FROM DUAL;
SELECT NEXT_DAY(SYSDATE,'SÁBADO') FROM DUAL;
SELECT NEXT_DAY(SYSDATE,'DOMINGO') FROM DUAL;
SELECT NEXT_DAY(SYSDATE,'LUNES') FROM DUAL;
SELECT NEXT_DAY(SYSDATE,'MARTES') FROM DUAL;
SELECT NEXT_DAY(SYSDATE,'MIÉRCOLES') FROM DUAL;

/* EXTRACT(DAY FROM FECHA) EXTRAE EL DÍA (NUMERICO) DE LA FECHA PROPORCIONADA*/

SELECT EXTRACT(DAY FROM FECHA_NAC) AS DIA FROM PERSONA;

/* EXTRACT(MONTH FROM FECHA) EXTRAE EL MES (NUMERICO) DE LA FECHA PROPORCIONADA*/

SELECT EXTRACT(MONTH FROM FECHA_NAC) AS MES FROM PERSONA;

/* EXTRACT(MONTH FROM FECHA) EXTRAE EL MES (NUMERICO) DE LA FECHA PROPORCIONADA*/

SELECT EXTRACT(YEAR FROM FECHA_NAC) AS AÑO FROM PERSONA;

/*TO_CHAR(FECHA,'YYYY'),TO_CHAR(FECHA,'MM'),TO_CHAR(FECHA,'DD') EXRAE LAS FECHAS COMO CARACTERES*/

SELECT FECHA_NAC,TO_CHAR(FECHA_NAC,'YYYY'),TO_CHAR(FECHA_NAC,'MM'),TO_CHAR(FECHA_NAC,'DD') FROM PERSONA;
