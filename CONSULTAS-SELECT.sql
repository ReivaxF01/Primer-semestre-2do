CREATE TABLE CARGO(
COD_CARGO NUMBER,
NOM_CARGO VARCHAR(50),
CONSTRAINT CARGO_PK PRIMARY KEY(COD_CARGO));

CREATE TABLE DEPARTAMENTO(
COD_DEPARTAMENTO NUMBER,
NOM_DEPARTAMENTO VARCHAR(50),
PRESUPUESTO_DEPARTAMENTO NUMBER,
CONSTRAINT DEPTO_PK PRIMARY KEY(COD_DEPARTAMENTO));

CREATE TABLE EMPLEADO(
COD_EMPLEADO NUMBER,
NOM_EMPLEADO VARCHAR2(50),
APEL_EMPLEADO VARCHAR2(50),
EDAD NUMBER,
GENERO VARCHAR2(50),
SUELDO NUMBER,
COD_DEPARTAMENTO NUMBER,
COD_CARGO NUMBER,
CONSTRAINT CARGO_FK FOREIGN KEY(COD_CARGO) REFERENCES CARGO(COD_CARGO),
CONSTRAINT DEPTO_FK FOREIGN KEY(COD_DEPARTAMENTO) REFERENCES DEPARTAMENTO(COD_DEPARTAMENTO),
CONSTRAINT EMPLEADO_PK PRIMARY KEY(COD_EMPLEADO));

insert into cargo values(1,'Jefe departamento');
insert into cargo values(2,'Operario');
insert into cargo values(3,'Asistente');
insert into cargo values(4,'Secretaria');
insert into cargo values(5,'Contralor');
insert into cargo values(6,'Tesorero');
insert into cargo values(7,'Asesor');
insert into cargo values(8,'Consultor');
insert into cargo values(9,'Diseñador');
insert into cargo values(10,'Analista');

insert into departamento values(1,'Informatica',54000000);
insert into departamento values(2,'Contabilidad',78000000);
insert into departamento values(3,'Marketing',100500000);
insert into departamento values(4,'Recursos Humanos',97000000);
insert into departamento values(5,'Produccion',86000000);
insert into departamento values(6,'Finanzas',120000000);
insert into departamento values(7,'Control de calidad',95000000);
insert into departamento values(8,'Post ventas',80000000);
insert into departamento values(9,'Ventas',110000000);
insert into departamento values(10,'Mantencion',74000000);

insert into empleado values(1,'Daniel','Lagos',35,'masculino',450000,1,2);
insert into empleado values(2,'Jorge','Lucero',32,'masculino',2450000,1,1);
insert into empleado values(3,'Luis','Gonzalez',42,'masculino',850000,1,3);
insert into empleado values(4,'Sara','Ramirez',41,'femenino',650000,1,4);
insert into empleado values(5,'Fernado','Flores',51,'masculino',950000,1,5);
insert into empleado values(6,'Pilar','Negrete',21,'femenino',650000,2,2);
insert into empleado values(7,'Gabriela','Alcantara',45,'femenino',850000,3,3);
insert into empleado values(8,'Consuelo','Lucero',25,'femenino',950000,1,2);
insert into empleado values(9,'Ivan','Valenzuela',58,'masculino',950000,2,5);
insert into empleado values(10,'Jaime','Leal',41,'masculino',650000,4,3);

SELECT * FROM EMPLEADO;

ALTER TABLE EMPLEADO DROP COLUMN GENERO;
--SELECT PERMITE TRAER LAS COLUMNAS QUE NECESITEMOS MOSTRAR
SELECT NOM_EMPLEADO,APEL_EMPLEADO FROM EMPLEADO;
SELECT COD_EMPLEADO,EDAD,SUELDO FROM EMPLEADO;
--WHERE SE USA PARA DETERMINAR CIERTAS CONDICIONES (POR EJEMPLO, MAYOR QUE, MENOR QUE, ETC.)
SELECT * FROM EMPLEADO
WHERE COD_EMPLEADO > 5;
--MOSTRAR SOLO EL NOMBRE Y APELLIDO DE LOS EMPLEADOS MAYORES DE 30 AÑOS
SELECT NOM_EMPLEADO,APEL_EMPLEADO FROM EMPLEADO
WHERE EDAD > 30;
/* <.>,<=, >=, <>,!= */
SELECT * FROM EMPLEADO
WHERE EDAD != 41;

SELECT * FROM EMPLEADO
WHERE EDAD <> 41;

--LISTAR LOS EMPLEADOS CUYA EDAD ESTE ENTRE 30 Y 40 AÑOS
SELECT * FROM EMPLEADO
WHERE EDAD >= 30 AND EDAD <= 40; -- SE USA EL OPERADOR AND
--TAMBIEN SE PUEDE USAR BETWEEN PARA LISTAR CIERTOS RANGOS
SELECT * FROM EMPLEADO
WHERE EDAD BETWEEN 30 AND 40;
--LISTAR LOS EMPLEADOS CUANDO EL SUELDO SE ENCUENTRA EN EL RANGO DE 800000 Y 1200000
SELECT * FROM EMPLEADO
WHERE SUELDO BETWEEN 800000 AND 1200000;

SELECT * FROM EMPLEADO
WHERE SUELDO >= 800000 AND SUELDO <= 1200000;
--LISTAR EMPLEADOS CUANDO SU EDAD ES 41 O 51
SELECT * FROM EMPLEADO
WHERE EDAD = 41 OR EDAD = 51;
--LISTAR LOS EMPLEADOS QUE TRABAJAN EN LOS DEPARTAMENTOS CON CODIGO 1,2 O 3
SELECT * FROM EMPLEADO
WHERE COD_DEPARTAMENTO IN (1,2,3); --IN CUMPLE LA MISMA FUNCION QUE OR
--MUESTRE LOS EMPLEADOS QUE TRABAJAN EN DEPARTAMENTOS 1 O 2 Y TENGAN UN SUELDO MAYOR A 700000
SELECT * FROM EMPLEADO
WHERE COD_DEPARTAMENTO IN(1,2) AND SUELDO > 700000;
/*PARA EL RECONOCIMIENTO DE PATRONES EN CADENAS DE CARACTERES SE UTILIZA EL OPERADOR LIKE CON LOS COMODINES % Y _ */
/*lISTAR LOS EMPLEADOS CUANDO EL NOMBRE INCLUYA LA LETRA "A"*/
SELECT * FROM EMPLEADO
WHERE NOM_EMPLEADO LIKE '%a%'; /*SE AÑADE UN % ANTES Y DESPUES DE LA LETRA O PARTE DEL TEXTO QUE QUERAMOS BUSCAR PARA INDICAR QUE
DA IGUAL SI EMPIEZA CON OTRA LETRA MIENTRAS TENGA 'a'*/
--MOSTRAR LOS EMPLEADOS CUANDO SU APELLIDO EMPIEZA CON L
SELECT * FROM EMPLEADO
WHERE APEL_EMPLEADO LIKE 'L%';-- EN RESUMEN, EL '%' INDICA UNO O MUCHOS CARACTERES ANTES O DESPUES DE LA LETRA
--MOSTRAR LOS EMPLEADOS CUANDO SU APELLIDO TERMINA CON O
SELECT * FROM EMPLEADO
WHERE APEL_EMPLEADO LIKE '%o';
--EL _ REPRESENTA UN CARACTER Y SE USA PARA CUANDO NECESITAMOS QUE UNA LETRA ESTÉ EN UNA POSICION ESPECIFICA
SELECT * FROM EMPLEADO
WHERE APEL_EMPLEADO LIKE '_a%';/*ESTO INDICA QUE LA SEGUNDA LETRA DEBE SER 'A', LA PRIMERA PUEDE SER CUALQUIERA Y LOS CARACTERES POSTERIORES
PUEDEN SER CUALQUIERA IGUALMENTE*/
-- LISTAR LOS EMPLEADOS EN EL CASO QUE EL APELLIDO CONTENGA A LO MENOS 2 LETRAS 'a'
SELECT * FROM EMPLEADO
WHERE APEL_EMPLEADO LIKE '%a%a%';/*con esto indicamos que el apellido debe tener al menos dos a, por eso el % indica cualquier texto antes o
despues de la a*/
--MUESTRE LOS EMPLEADOS CUANDO EN EL NOMBRE O EL APELLIDO LA SEGUNDA LETRA Y LA ULTIMA SEAN UNA A
SELECT * FROM EMPLEADO
WHERE NOM_EMPLEADO LIKE '_a%a' OR APEL_EMPLEADO LIKE '_a%a';
--FUNCIONES DE AGREGACIÓN O AGREGADO (AVG,SUM,MAX,MIN,COUNT)
SELECT AVG(SUELDO) FROM EMPLEADO; --AVG ES LA ABREVIACION DE AVERAGE Y RETORNA EL PROMEDIO
SELECT AVG(SUELDO) AS PROMEDIO_SUELDO FROM EMPLEADO; --ESTO ES SI QUEREMOS ASIGNAR UN NOMBRE AL PROMEDIO CON LA FUNCION "AS"
SELECT SUM(SUELDO) FROM EMPLEADO; --SUM RETORNA LA SUMA DE VALORES
SELECT SUM(SUELDO) AS SUMA_SUELDOS FROM EMPLEADO;--ACÁ, LA FUNCION "AS" OTORGA UN NOMBRE AL VALOR QUE DEVUELVE SUM
SELECT MAX(EDAD) AS EDAD_MAXIMA FROM EMPLEADO; --LA FUNCION MAX RETORNA EL VALOR MAXIMO Y LE ASIGNAMOS EL NOMBRE EDAD_MAXIMA CON LA FUNCION AS
SELECT MAX(EDAD) - MIN(EDAD); -- SE PUEDEN REALIZAR OPERACIONES CON LOS VALORES DE RETORNO, EN ESTE CASO EDAD MAXIMA - EDAD MINIMA
SELECT MAX(EDAD),MIN(EDAD),AVG(EDAD) FROM EMPLEADO; --ACÁ MOSTRARÁ LOS VALORES COMO TRES FILAS DE UNA TABLA AUNQUE ESTAS NO EXISTAN
SELECT COUNT(EDAD) FROM EMPLEADO; --COUNT CUENTA LA CANTIDAD DE COLUMNAS DE UNA TABLA
SELECT COUNT(*) FROM EMPLEADO; -- ESTO SIRVE PARA CONTAR TODAS LAS COLUMNAS DE UNA TABLA
--CUANTOS EMPLEADOS MAYORES A 50 AÑOS
SELECT COUNT(*) FROM EMPLEADO
WHERE EDAD>50;

--CUENTE LOS EMPLEADOS QUE GANAN ENTRE 800000 Y 1000000 DE PESOS
SELECT COUNT(*) AS TOTAL_DE_EMPLEADOS FROM EMPLEADO
WHERE SUELDO BETWEEN 800000 AND 1000000;
--CUENTE CUANTOS EMPLEADOS GANAN MAS QUE EL SUELDO PROMEDIO
SELECT COUNT(*) FROM EMPLEADO
WHERE SUELDO > (SELECT AVG(SUELDO) FROM EMPLEADO);/*PRIMERO SE REALIZAN LAS OPERACIONES DENTRO DE UN PARENTESIS, ES DECIR, EL AVG SE HACE ANTES 
QUE EL COUNT DEL PRIMER SELECT*/
--MUESTRE LOS DATOS DEL O LOS EMPLEADOS CON EL MAXIMO SUELDO
SELECT * FROM EMPLEADO
WHERE SUELDO = (SELECT MAX(SUELDO) FROM EMPLEADO);
--MUESTRE LOS DATOS DEL O LOS EMPLEADOS CON EL MINIMO SUELDO
SELECT * FROM EMPLEADO
WHERE SUELDO = (SELECT MIN(SUELDO) FROM EMPLEADO);
-- PARA MOSTRAR LOS DATOS SIN REPETICIÓN USAR LA INSTRUCCION DISTINCT
SELECT DISTINCT COD_DEPARTAMENTO FROM EMPLEADO;
--CUENTE SIN REPETICION LOS CARGOS DESEMPEÑADOS POR LOS EMPLEADOS
SELECT COUNT(DISTINCT COD_CARGO) FROM EMPLEADO;
ALTER TABLE EMPLEADO ADD GENERO VARCHAR(20);
SELECT * FROM EMPLEADO;
SELECT COUNT(GENERO) FROM EMPLEADO;
UPDATE EMPLEADO
SET GENERO='Masculino'
WHERE COD_EMPLEADO = 1;
/*UPDATE EMPLEADO
SET GENERO='Femenino'
WHERE NOM_EMPLEADO LIKE '%a';*/ --IGNOREN ESTA PARTE, LA USE PARA AGREGAR EL GENERO FEMENINO A LOS NOMBRES QUE TERMINARAN EN A
SELECT * FROM EMPLEADO
WHERE GENERO IS NULL; --MUESTRA LAS COLUMNAS CON VALOR "NULL"

SELECT * FROM EMPLEADO
WHERE GENERO IS NOT NULL; -- HACE LO CONTRARIO A LA FUNCION ANTERIOR.
